rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection - users can only access their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow creation during signup
      allow create: if request.auth != null 
        && request.auth.uid == userId
        && request.auth.token.email_verified == true
        && resource == null
        && request.resource.data.keys().hasAll(['role', 'displayName', 'email', 'createdAt'])
        && request.resource.data.role in ['user', 'production']
        && request.resource.data.displayName is string
        && request.resource.data.email is string
        && request.resource.data.createdAt is string;
    }
    
    // Subtitle projects collection - users can only access their own projects
    match /projects/{projectId} {
      allow read, write: if request.auth != null 
        && request.auth.uid == resource.data.userId;
      
      // Allow creation of new projects
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.userId
        && request.resource.data.keys().hasAll(['userId', 'title', 'createdAt', 'status'])
        && request.resource.data.userId is string
        && request.resource.data.title is string
        && request.resource.data.createdAt is string
        && request.resource.data.status in ['draft', 'processing', 'completed', 'failed'];
    }
    
    // Forgery detection results - only production users can access
    match /forgery_results/{resultId} {
      allow read, write: if request.auth != null 
        && request.auth.uid == resource.data.userId
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'production';
      
      // Allow creation of new results
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.userId
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'production'
        && request.resource.data.keys().hasAll(['userId', 'fileName', 'analysisDate', 'results'])
        && request.resource.data.userId is string
        && request.resource.data.fileName is string
        && request.resource.data.analysisDate is string
        && request.resource.data.results is map;
    }
    
    // File uploads - users can only access their own uploads
    match /uploads/{uploadId} {
      allow read, write: if request.auth != null 
        && request.auth.uid == resource.data.userId;
      
      // Allow creation of new uploads
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.userId
        && request.resource.data.keys().hasAll(['userId', 'fileName', 'fileType', 'uploadDate', 'status'])
        && request.resource.data.userId is string
        && request.resource.data.fileName is string
        && request.resource.data.fileType is string
        && request.resource.data.uploadDate is string
        && request.resource.data.status in ['uploading', 'completed', 'failed'];
    }
    
    // Admin collection - only production users can access
    match /admin/{document=**} {
      allow read, write: if request.auth != null 
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'production';
    }
    
    // Analytics collection - only production users can write, all authenticated users can read
    match /analytics/{document=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null 
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'production';
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
